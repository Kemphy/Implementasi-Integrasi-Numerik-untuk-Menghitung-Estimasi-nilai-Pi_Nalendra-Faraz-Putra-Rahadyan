import numpy as np
import time
import matplotlib.pyplot as plt

# Fungsi untuk menghitung f(x)
def f(x):
    return 4 / (1 + x**2)

# Fungsi integrasi Simpson 1/3
def simpson_1_3(a, b, N):
    if N % 2 != 0:
        raise ValueError("N must be an even number.")
    
    h = (b - a) / N
    x = np.linspace(a, b, N + 1)
    y = f(x)
    
    S = y[0] + y[-1] + 4 * np.sum(y[1:-1:2]) + 2 * np.sum(y[2:-2:2])
    return S * (h / 3)

# Nilai referensi pi
pi_reference = 3.14159265358979323846

# Variasi nilai N
N_values = [10, 100, 1000, 10000]

# Hasil pengujian
results = []

for N in N_values:
    start_time = time.time()
    pi_approx = simpson_1_3(0, 1, N)
    end_time = time.time()
    
    rms_error = np.sqrt((pi_approx - pi_reference)**2)
    execution_time = end_time - start_time
    
    results.append((N, pi_approx, rms_error, execution_time))

# Menampilkan hasil
print(f"{'N':>10} {'Approx Pi':>20} {'RMS Error':>20} {'Execution Time (s)':>20}")
for result in results:
    print(f"{result[0]:>10} {result[1]:>20.15f} {result[2]:>20.15f} {result[3]:>20.15f}")

# Plot hasil
N_vals = [result[0] for result in results]
errors = [result[2] for result in results]
times = [result[3] for result in results]

plt.figure(figsize=(12, 6))

# Plot RMS Error
plt.subplot(1, 2, 1)
plt.plot(N_vals, errors, marker='o')
plt.xscale('log')
plt.yscale('log')
plt.xlabel('N (log scale)')
plt.ylabel('RMS Error (log scale)')
plt.title('RMS Error vs N')
plt.grid(True)

# Plot Execution Time
plt.subplot(1, 2, 2)
plt.plot(N_vals, times, marker='o')
plt.xscale('log')
plt.xlabel('N (log scale)')
plt.ylabel('Execution Time (s)')
plt.title('Execution Time vs N')
plt.grid(True)

plt.tight_layout()
plt.show()
